templator - version 1.0.0
--------------------------------------------------------------------------------
This repository provides a simple PHP code library for generating pages from
PHP template files.

Primary authors:

    Roger Gee <roger.gee@tulsalibrary.org>

Other authors:

--------------------------------------------------------------------------------
Dependencies:

    n/a

--------------------------------------------------------------------------------
Installation:

This library is available as a composer package. Require 'tccl/templator' in
your composer.json file and then install.

--------------------------------------------------------------------------------
Usage:

Templator loads php template files from the include path. First make sure your
include path is configured correctly. Alternatively you can load templates
relative to the script directory. Template scripts must have the suffix
.php.tpl. If you do not specify the extension, the library will add it for you.

The base interface \TCCL\Templator\Templator defines the contract for
templators. The library provides a basic templator via the
\TCCL\Templator\TemplateGenerator class and an extended version via the
\TCCL\Templator\PageGenerator class. The 'TemplateGenerator' is a generic
template generator and the 'PageGenerator' is a more specialized version for
top-level HTML pages.

  Sample usage:

    $page = new \TCCL\Templator\PageGenerator('login'); // i.e. login.php.tpl
    $page->addVariable('failed',true);
    $html = $page->evaluate();

    echo $page->generate();

Templators of type TemplateGenerator are designed to have nested components
(which are themselves templators). These templators are executed in the context
of a method call, meaning the $this variable always refers to the templator
instance.

TemplateGenerator instances also store lists of variables which are extracted
into the scope of the template script execution. Variables should be added in
your model via addVariable() or addVariables(). Variables are inherited from a
parent templator to a child templator. Note that the variables are copied;
therefore changes should not be propogated through variables unless they are
objects. References will only propogate to the caller who added them to the
templator.

Also, the included templator implementations by default preevaluate HTML in
memory unless configured otherwise in the constructor. Preevaluation is
sometimes necessary if you need side-effects to propogate to a parent templator;
however it can consume a lot of memory if you aren't careful.

  Example template script using PageGenerator methods:

    <html>
      <head>
        <title><?php print $title;?></title>
      </head>
      <body>
        <?php $this->generateComponent('top-bar');?>
        <div class="core-content">
          <?php $this->generateComponent('content');?>
        </div>
      </body>
    </html>

  Sample code creating such a PageGenerator (the templators are configured to
  avoid preevaluating HTML in memory):

    $page = new \TCCL\Templator\PageGenerator('index',false);
    $page->addVariable('title','The Site');

    $topbar = new \TCCL\Templator\TemplateGenerator('top-bar',false);
    $page->addComponent('top-bar',$topbar);

    $content = new \TCCL\Templator\TemplateGenerator('index-content',false);
    $page->addComponent('content',$content);
